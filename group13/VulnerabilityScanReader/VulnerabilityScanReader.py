from dataclasses import dataclass
from datetime import datetime
import argparse


@dataclass
class Port:
    host_ip: str
    port: int
    time_scanned: str

    def get_csv_representation(self):
        return "{},{},{}".format(self.host_ip, self.port, self.time_scanned)


class NmapReportHandler:
    CSV_HEADER = "host_ip,port,timestamp\n"
    HOST_DECLARATION_IDENTIFIER = "Nmap scan report for"
    PORT_DECLARATION_IDENTIFIER = "/tcp "
    DATE_DECLARATION_IDENTIFIER = "Date: "
    SCAN_INITIALIZED_IDENTIFIER = "# Nmap 7.80 scan initiated"

    def __init__(self):
        self.ports = list()
        self.csv_string = ""

    def to_datetime(self, date: str):
        # Nmap has two different formats for dates, both include the day twice
        try:
            return datetime.strptime(date, date[0: date.find(",") + 2] + '%d %b %Y %H:%M:%S GMT')
        except ValueError:
            return datetime.strptime(date, date[0: date.find(",") + 2] + '%b %d %Y %H:%M:%S GMT')

    def read_file(self, file_name: str):
        current_address = ""
        last_found_date = None

        with open(file_name, 'r') as file:
            for line in file:

                if line.find(self.SCAN_INITIALIZED_IDENTIFIER) != -1:
                    date_sanitized = line[line.find(self.SCAN_INITIALIZED_IDENTIFIER) + len(
                        self.SCAN_INITIALIZED_IDENTIFIER) + 5: line.rfind("as:") - 1]
                    last_found_date = datetime.strptime(date_sanitized, "%b %d %H:%M:%S %Y")

                if line.find(self.HOST_DECLARATION_IDENTIFIER) != -1:
                    # since IP address is always kept at the end of the line in either brackets or not
                    current_address = line[line.rfind(" ") + 1: -1].replace("(", "").replace(")", "")

                if line.find(self.DATE_DECLARATION_IDENTIFIER) != -1:
                    # fishing the date to have a better approximate for when the port was scanned
                    date_sanitized = line[
                                     line.find(self.DATE_DECLARATION_IDENTIFIER) + len(self.DATE_DECLARATION_IDENTIFIER):].strip()
                    found_date = self.to_datetime(date_sanitized)

                    if last_found_date is None or last_found_date < found_date:
                        last_found_date = found_date

                if line.find(self.PORT_DECLARATION_IDENTIFIER) != -1:
                    found_port = line[: line.find(self.PORT_DECLARATION_IDENTIFIER)]
                    port = Port(current_address, int(found_port), last_found_date.isoformat())
                    self.ports.append(port)
                    self.csv_string += port.get_csv_representation() + "\n"

    def write_csv_file(self, file_path: str):
        with open(file_path, 'w') as file:
            file.write(self.CSV_HEADER)
            file.write(self.csv_string)


if __name__ == "__main__":
    argument_parser = argparse.ArgumentParser()
    argument_parser.add_argument('--read_file', type=str, required=True, default="Data/aggressive_scan.txt")
    argument_parser.add_argument('--write_file', type=str, required=True, default="Data/port_scan.csv")
    arguments = argument_parser.parse_args()

    nmap_report_handler = NmapReportHandler()
    nmap_report_handler.read_file(arguments.read_file)
    nmap_report_handler.write_csv_file(arguments.write_file)
